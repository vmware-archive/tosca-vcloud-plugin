tosca_definitions_version: cloudify_dsl_1_0

imports:
    - http://www.getcloudify.org/spec/cloudify/3.2/types.yaml
    - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/master/plugin.yaml
    - http://www.getcloudify.org/spec/fabric-plugin/1.2/plugin.yaml

inputs:
    vcloud_username:
        type: string
        description: >
            User login for vcloud air

    vcloud_password:
        type: string
        default: ''
        description: >
            User password for vcloud air - for login by name + password

    vcloud_token:
        type: string
        default: ''
        description: >
            User token for vcloud air - for login by name + token

    vcloud_url:
        type: string
        description: >
            Vcloud url

    vcloud_service:
        type: string
        description: >
            Vcloud service

    vcloud_service_type:
        type: string
        default: 'subscription'
        description: >
            Type of service: subscription, ondemand, vcd, private

    vcloud_instance:
        type: string
        default: ''
        description: >
            Only required for ondemand service type.

    vcloud_api_version:
        type: string
        default: '5.6'
        description: >
            Version of api, for now 5.6

    vcloud_org_url:
        type: string
        default: ''
        description: >
            Only required if using token based login on a private vcloud
            director. This can be obtained by following the vcloud API
            example docs. If you are unsure of how to obtain this, you will
            need to use password based login.

    vcloud_org:
        type: string
        description: >
            Organization uuid

    vcloud_vdc:
        type: string
        description: >
            Virtual data center name

    manager_server_name:
        type: string
        description: >
            Name for server

    manager_server_catalog:
        type: string
        description: >
            Name of catalog, can be 'Public Catalog'

    manager_server_template:
        type: string
        description: >
            Name of template from catalog,
            can be 'Ubuntu Server 12.04 LTS (amd64 20150127)'

    manager_server_cpus:
        type: string
        default: 2
        description: >
            Count cpu on node

    manager_server_memory:
        type: string
        default: 4096
        description: >
            Amount memmory on node

    management_network_use_existing:
        type: boolean
        default: false
        description: >
            Use existed network

    management_network_name:
        type: string
        description: >
            Name common network that can be used for nodes as managment
            network

    management_port_ip_allocation_mode:
        type: string
        default: pool
        description: >
            Ip allocation type for case when you doesn't set public ip
            for node and want auto allocate ip

    management_port_ip_address:
        type: string
        default: ''
        description: >
            Port public ip

    management_network_public_nat_use_existing:
        type: boolean
        default: false
        description: >
            Use already existed nat rules, only for case when you
            doesn't want to change nat rules

    management_network_public_ip:
        type: string
        default: ''
        description: >
            Manager network public ip (used for SNAT)

    edge_gateway:
        type: string
        default: gateway
        description: >
            For 'ondemand' service type, the value of edge_gateway
            is always 'gateway'

    manager_server_public_ip:
        type: string
        default: ''
        description: >
            For 'ondemand' service type, the value of
            floating_ip_public_ip can be empty

    manager_server_ssh_port:
        type: string
        default: 22
        description: >
            SSH port that can be used for installed node

    agents_user:
        type: string
        default: ubuntu
        description: >
            User name that will be used for agent

    manager_server_user:
        default: ubuntu
        type: string
        description: >
            User name that will be used for login to manager

    manager_private_key_path:
        default: ~/.ssh/cloudify-manager-kp.pem
        type: string
        description: >
            Private key for manager

    agent_private_key_path:
        default: ~/.ssh/cloudify-agent-kp.pem
        type: string
        description: >
            Private key for agent

    manager_public_key:
        type: string
        default: ''
        description: >
            Public key for manager

    agent_public_key:
        type: string
        default: ''
        description: >
            Public key for agent

    resources_prefix:
        type: string
        default: ''
        description: >
            Prefix for node name

    volume_use_external:
        type: boolean
        default: false
        description: >
            Use alredy exised volume

    volume_external_name:
        type: string
        default: ''
        description: >
            Volume resource id

    volume_name:
        type: string
        default: 'manager_disk'
        description: >
            Volume name

    volume_size_Mb:
        type: string
        default: 10240
        description: >
            Volume size in Mb

node_types:
    vcloud_configuration:
        derived_from: cloudify.nodes.Root
        properties:
            vcloud_config: {}

node_templates:

    node_security_group:
        type: cloudify.vcloud.nodes.SecurityGroup
        properties:
            security_group:
                name: nodevcloud_security_group
                edge_gateway: { get_input: edge_gateway }
            rules:
                - source: internal
                  destination: internal
                  destination_port: 22
                  action: allow
                  description: >
                        ssh between nodes and management node
                  protocol: TCP
                - source: external
                  destination: internal
                  destination_port: { get_input: manager_server_ssh_port }
                  action: allow
                  description: >
                        ssh between external net and managment node
                  protocol: TCP
                - source: external
                  destination: internal
                  destination_port: 80
                  action: allow
                  description: >
                        http to management node
                  protocol: TCP
                - source: host
                  destination: any
                  action: allow
                  description: >
                         backward network connection for host updates
                  protocol: any
                - source: external
                  destination: internal
                  action: allow
                  description: >
                         Allow ping
                  protocol: ICMP
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

    management_port:
        type: cloudify.vcloud.nodes.Port
        properties:
            port:
                network: { get_input: management_network_name }
                ip_allocation_mode: { get_input: management_port_ip_allocation_mode }
                ip_address: { get_input: management_port_ip_address }
                primary_interface: true
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
        relationships:
            - target: management_network
              type: cloudify.vcloud.port_connected_to_network

    management_network:
        type: cloudify.vcloud.nodes.Network
        properties:
            use_external_resource: { get_input: management_network_use_existing }
            resource_id: { get_input: management_network_name }
            network:
                name: { get_input: management_network_name }
                edge_gateway: { get_input: edge_gateway }
                static_range: 10.67.79.129-10.67.79.254
                netmask: 255.255.255.0
                gateway_ip: 10.67.79.1
                dns:
                    - 10.67.79.1
                    - 8.8.8.8
                dhcp:
                    dhcp_range: 10.67.79.2-10.67.79.128
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
        relationships:
            - target: management_network_nat
              type: cloudify.vcloud.net_connected_to_public_nat

    management_network_nat:
        type: cloudify.vcloud.nodes.PublicNAT
        properties:
            use_external_resource: { get_input: management_network_public_nat_use_existing }
            nat:
                edge_gateway: { get_input: edge_gateway }
                public_ip: { get_input: management_network_public_ip }
            rules:
                - type: SNAT
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

    management_server_nat:
        type: cloudify.vcloud.nodes.PublicNAT
        properties:
            nat:
                edge_gateway: { get_input: edge_gateway }
                public_ip: { get_input: manager_server_public_ip }
            rules:
             - type: DNAT
               protocol: tcp
               original_port: 80
               translated_port: 80
             - type: DNAT
               protocol: tcp
               original_port: 8086
               translated_port: 8086
             - type:  DNAT
               protocol: tcp
               original_port: 443
               translated_port: 443
             - type: DNAT
               protocol: tcp
               original_port: { get_input: manager_server_ssh_port }
               translated_port: 22
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

    vcloud_configuration:
        type: vcloud_configuration
        properties:
            vcloud_config:
                username: { get_input: vcloud_username }
                password: { get_input: vcloud_password }
                token: { get_input: vcloud_token }
                url: { get_input: vcloud_url }
                service: { get_input: vcloud_service }
                org: { get_input: vcloud_org }
                vdc: { get_input: vcloud_vdc }
                service_type: { get_input: vcloud_service_type }
                instance: { get_input: vcloud_instance }
                api_version: { get_input: vcloud_api_version }
                org_url: { get_input: vcloud_org_url }
                edge_gateway: { get_input: edge_gateway }

    manager_keypair:
        type: cloudify.vcloud.nodes.KeyPair
        properties:
            private_key_path: { get_input: manager_private_key_path }
            public_key:
                key: { get_input: manager_public_key }
                user: { get_input: manager_server_user }

    agent_keypair:
        type: cloudify.vcloud.nodes.KeyPair
        properties:
            private_key_path: { get_input: agent_private_key_path }
            public_key:
                key: { get_input: agent_public_key }
                user: { get_input: agents_user }

    manager_server:
        type: cloudify.vcloud.nodes.Server
        properties:
            install_agent: false
            server:
                name: { get_input: manager_server_name }
                catalog: { get_input: manager_server_catalog }
                template: { get_input: manager_server_template }
                guest_customization:
                    public_keys:
                        - { get_property: [manager_keypair, public_key] }
                        - { get_property: [agent_keypair, public_key] }
                    computer_name: { get_input: manager_server_name }
                hardware:
                    cpu: { get_input: manager_server_cpus }
                    memory: { get_input: manager_server_memory }
            management_network: { get_input: management_network_name }
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
        relationships:
            - target: management_port
              type: cloudify.vcloud.server_connected_to_port
            - target: management_server_nat
              type: cloudify.vcloud.server_connected_to_public_nat
            - target: node_security_group
              type: cloudify.vcloud.server_connected_to_security_group

    volume:
        type: cloudify.vcloud.nodes.Volume
        properties:
            device_name: /dev/sdb
            volume:
                name: { get_input: volume_name }
                size: { get_input: volume_size_Mb }
            use_external_resource: { get_input: volume_use_external }
            resource_id: { get_input: volume_external_name }
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
        relationships:
            - type: cloudify.vcloud.volume_attached_to_server
              target: manager_server

    manager_data:
        type: cloudify.nodes.FileSystem
        properties:
            fs_type: ext4
            fs_mount_path: /var/lib/docker
        interfaces:
            cloudify.interfaces.lifecycle:
                configure:
                    implementation: fabric.fabric_plugin.tasks.run_script
                    inputs:
                        script_path: https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/mkfs.sh
                        fabric_env:
                            user: { get_input: manager_server_user }
                            key_filename: { get_input: manager_private_key_path }
                            host_string: { get_attribute: [management_server_nat, public_ip] }
                            port: { get_input: manager_server_ssh_port }
        relationships:
            - type: cloudify.relationships.file_system_depends_on_volume
              target: volume
              source_interfaces:
                  cloudify.interfaces.relationship_lifecycle:
                      preconfigure:
                          implementation: fabric.fabric_plugin.tasks.run_script
                          inputs:
                              script_path: https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/fdisk.sh
                              device_name: { get_attribute: [TARGET, device_name] }
                              fabric_env:
                                  user: { get_input: manager_server_user }
                                  key_filename: { get_input: manager_private_key_path }
                                  host_string: { get_attribute: [management_server_nat, public_ip] }
                                  port: { get_input: manager_server_ssh_port }

            - type: cloudify.relationships.file_system_contained_in_compute
              target: manager_server
              source_interfaces:
                  cloudify.interfaces.relationship_lifecycle:
                      establish:
                          implementation: fabric.fabric_plugin.tasks.run_script
                          inputs:
                              script_path: https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/mount-docker.sh
                              fabric_env:
                                  user: { get_input: manager_server_user }
                                  key_filename: { get_input: manager_private_key_path }
                                  host_string: { get_attribute: [management_server_nat, public_ip] }
                                  port: { get_input: manager_server_ssh_port }
                      unlink:
                          implementation: fabric.fabric_plugin.tasks.run_script
                          inputs:
                              script_path: https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/unmount.sh
                              fabric_env:
                                  user: { get_input: manager_server_user }
                                  key_filename: { get_input: manager_private_key_path }
                                  host_string: { get_attribute: [management_server_nat, public_ip] }
                                  port: { get_input: manager_server_ssh_port }

    manager:
        type: cloudify.nodes.CloudifyManager
        properties:
            cloudify_packages:
                agents:
                    ubuntu_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/ga-RELEASE/cloudify-ubuntu-agent_3.2.0-ga-b200_amd64.deb
                    centos_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/ga-RELEASE/cloudify-centos-final-agent_3.2.0-ga-b200_amd64.deb
                    windows_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/ga-RELEASE/cloudify-windows-agent_3.2.0-ga-b200_amd64.deb
                docker:
                    docker_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/ga-RELEASE/cloudify-docker_3.2.0-ga-b200.tar

            cloudify:
                resources_prefix: { get_input: resources_prefix }

                cloudify_agent:
                    min_workers: 0
                    max_workers: 5
                    remote_execution_port: 22
                    user: { get_input: agents_user }

                workflows:
                    task_retries: -1  # this means forever
                    task_retry_interval: 30

                policy_engine:
                    start_timeout: 30

        relationships:
            - target: manager_server
              type: cloudify.relationships.contained_in
            - target: manager_data
              type: cloudify.relationships.depends_on

        interfaces:
            cloudify.interfaces.lifecycle:
                create:
                    implementation: fabric.fabric_plugin.tasks.run_task
                    inputs:
                        tasks_file: scripts/configure.py
                        task_name: configure
                        task_properties:
                            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
                        fabric_env:
                            user: { get_input: manager_server_user }
                            key_filename: { get_input: manager_private_key_path }
                            host_string: { get_attribute: [management_server_nat, public_ip] }
                            port: { get_input: manager_server_ssh_port }
                configure:
                    implementation: fabric.fabric_plugin.tasks.run_module_task
                    inputs:
                        task_mapping: cloudify_cli.bootstrap.tasks.bootstrap_docker
                        task_properties:
                            cloudify_packages: { get_property: [manager, cloudify_packages] }
                            agent_local_key_path: { get_property: [agent_keypair, private_key_path] }
                            provider_context: { get_attribute: [manager, provider_context] }
                        fabric_env:
                            user: { get_input: manager_server_user }
                            key_filename: { get_input: manager_private_key_path }
                            host_string: { get_attribute: [management_server_nat, public_ip] }
                            port: { get_input: manager_server_ssh_port }
                start:
                    implementation: fabric.fabric_plugin.tasks.run_task
                    inputs:
                        tasks_file: scripts/configure_docker.py
                        task_name: configure
                        task_properties:
                            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
                        fabric_env:
                            user: { get_input: manager_server_user }
                            key_filename: { get_input: manager_private_key_path }
                            host_string: { get_attribute: [management_server_nat, public_ip] }
                            port: { get_input: manager_server_ssh_port }
                stop:
                    implementation: fabric.fabric_plugin.tasks.run_module_task
                    inputs:
                        task_mapping: cloudify_cli.bootstrap.tasks.stop_manager_container
                        fabric_env:
                            user: { get_input: manager_server_user }
                            key_filename: { get_property: [manager_keypair, private_key_path] }
                            host_string: { get_attribute: [management_server_nat, public_ip] }
                            port: { get_input: manager_server_ssh_port }
                delete:
                    implementation: fabric.fabric_plugin.tasks.run_module_task
                    inputs:
                        task_mapping: cloudify_cli.bootstrap.tasks.stop_docker_service
                        fabric_env:
                            user: { get_input: manager_server_user }
                            key_filename: { get_property: [manager_keypair, private_key_path] }
                            host_string: { get_attribute: [management_server_nat, public_ip] }
                            port: { get_input: manager_server_ssh_port }
            cloudify.interfaces.validation:
                creation:
                    implementation: cli.cloudify_cli.bootstrap.tasks.creation_validation
                    inputs:
                        cloudify_packages: { get_property: [manager, cloudify_packages] }


plugins:
    cli:
        install: false
        executor: central_deployment_agent


outputs:
    manager_ip:
        value: { get_attribute: [management_server_nat, public_ip] }
